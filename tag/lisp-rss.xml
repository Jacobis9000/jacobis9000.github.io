<?xml version="1.0"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"> <channel> <title>Learning Lisp!</title> <link>https://jacobis9000.github.io/</link> <atom:link href="https://jacobis9000.github.io//rss.xml" rel="self" type="application/rss+xml" /> <language>en-us</language> <pubDate>Mon, 05 Aug 2024 18:35:59 +0100</pubDate> <item> <title>2024-08-05</title> <link>https://jacobis9000.github.io//posts/2024-08-05.html</link> <pubDate>2024-08-05 14:53:44</pubDate> <author>Joseph Ashford</author> <guid isPermaLink="true">https://jacobis9000.github.io//posts/2024-08-05.html</guid> <category><![CDATA[ lisp ]]></category> <description><![CDATA[ <!-- **** your post here (remove this line) **** -->

<!-- format: could be 'html' (for raw html) or 'md' (for markdown).  -->

<h1>Learning Lisp: A New Programmer's Perspective</h1>

<blockquote>
<p>&quot;Each atom of that stone, each mineral flake of that night-filled mountain,
in itself, forms a world. The struggle itself toward the heights is enough
to fill a man's heart. One must imagine Sisyphus happy.&quot; -- Albert Camus</p>
</blockquote>

<p>This quote of Albert Camus from his work on the absurdity of existence expresses something of my journey with Common Lisp.  Common Lisp is absurd.  It is an ancient language by the standards of programming, yet more modern than anything available in the lineage of C.  It is a simple language in some respects which can become infinitely more complex, because it is infinitely extensible and modifiable to your needs.  It has taken me two years of (on-and-off) learning Lisp to realise something about Lisp: it's not a language, it's a meta-language. It can become any language you like, and it can enable any paradigm, or combinations of paradigms you like. But what was it that Camus captured of my journey?</p>

<p>My friends think I am ridiculous, in that I chose to learn to program with no purpose or aim in mind, no end-goal, no programming career I coveted nor anything, really, outside of the challenge itself.  This is what Camus means when he says we must imagine Sisyphus happy. Sisyphus, who must push the boulder to the top of the mount only to have it fall again, finds purpose in nothing more than his struggle. That's me!</p>

<p>So I began with CS50x the programming course by Harvard, and learnt C and Python with varying degrees of success. I preferred C to Python. In fact, I struggled with Python so much, because it is determined to force you to think in a certain way, and I was unwilling to bend to its will.  And also: whitespace. And also: overloaded operators.  And also: well, I just didn't like everything about it. It seemed no improvement on C and much worse really, and I couldn't believe that it was touted as a &quot;modern&quot; and &quot;accessible&quot; language. Python wasn't for me, at that time, anyway.</p>

<p>It's maybe because I grew up coding in MUSHcode. Not many people have heard of MUSHcode, but it's a programming language designed for text-based programming games called MUSHes, which stands for Multi-User Shared Hallucinations.  Our MUSH was graphical, though, with 16-bit IBM CP437 Extended Character Set graphics. Really, it pushed the envelope of what a MUSH is capable of doing, and I hold that it is the best MUSH ever made.  Now MUSHcode has been, by some, compared to Lisp, and in some ways the comparison holds. Like Lisp, data is usually a list (but the form the list takes is a string, because of course, it's a language for text-based games.) There's functions like <strong>dolist</strong>. You nest functions, nest and nest and nest.  And there's brackets (parentheses.) Lots and lots of brackets. Round brackets and square brackets too.</p>

<p>So brackets didn't intimidate me.</p>

<p>It was on the basis that Lisp was similar to MUSHcode that I decided to try Lisp. Lisp was a revelation, coming from C and Python. It worked like I expected a programming language to work. It was natural, intuitive, sensible and sane. It was a dream coming from C and Python. Everything in Lisp has a return value, and code is data and data is code. So you plug functions into functions, and get results! Just like MUSHcode, but a real programming language (sorry MUSHcode.)</p>

<p>So suddenly my Sisyphean struggle was not so much a struggle, but a joyful journey. Due to the vagaries of life I wasn't able to study Lisp constantly, work, family, etc. got in the way, and I have a lot of hobbies, too. But when I did I just had FUN! The REPL is an instant-feedback-loop, you test your code function by function, on the fly. There's no compiling, failing, trawling through pages of code. There's no confusion and misery for hours. I don't even know the full power of the debugger and usually just &quot;Abort&quot; but I find debugging in Lisp, compared to any other language I've tried, a breeze.</p>

<p>Lisp is just fun, but it is also consistent and makes sense. I can't explain why here. I'm no expert, and there's better people for that, but if you haven't tried it, try Lisp: it might just change your life.</p>

<p>So I'll upload to this blog bits of Lisp I find interesting, or stuff I'm doing, or my thoughts about Lisp or programming generally. If you're interested in listening to the half-baked theories of a perpetual n00b, welcome to my blog :)</p>

<!--more-->

<p>Excerpt separator can also be extracted from content.
Add <code>excerpt: &lt;string&gt;</code> to the above metadata.
Excerpt separator is <code>&lt;!--more--&gt;</code> by default.</p>
 ]]></description> </item> </channel> </rss>