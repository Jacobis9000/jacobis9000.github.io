<?xml version="1.0"?>
<feed xmlns="http://www.w3.org/2005/Atom"> <title>Learning Lisp!</title> <link href="jacobis9000.github.io"/> <link type="application/atom+xml" rel="self" href="jacobis9000.github.io/atom.xml"/> <updated>Thu, 08 Aug 2024 15:00:30 +0100</updated> <author> <name>Joseph Ashford</name> </author> <entry> <link type="text/html" rel="alternate" href="jacobis9000.github.io/posts/2024-08-08.html"/> <title>2024-08-08</title> <published>2024-08-08 13:17:18</published> <updated>2024-08-08 13:17:18</updated> <author> <name>Joseph Ashford</name> <uri>jacobis9000.github.io</uri> </author> <content type="html">&lt;!-- **** your post here (remove this line) **** --&gt;

&lt;!-- format: could be &#039;html&#039; (for raw html) or &#039;md&#039; (for markdown).  --&gt;

&lt;h1&gt;Setting up your Lisp IDE&lt;/h1&gt;

&lt;p&gt;This is a guide to setting up your LISP IDE using Emacs as your editor, SBCL as your compiler, slime as your REPL/IDE, Quicklisp as your package manager and Ultralisp as your package manager distribution, which has all the latest releases.&lt;/p&gt;

&lt;p&gt;It is drawn from various guides, but the main one is at &lt;a href=&quot;https://lisp-lang.org/learn/getting-started/&quot; &gt;Lisp-Lang.org&lt;/a&gt; and this guide will get you going without Ultralisp for the latest releases of packages, however Ultralisp is useful if for example you&#039;re interested in Web or GUI development and want the latest version of the CLOG Builder IDE, which is only available through Ultralisp. For more on CLOG and some great Lisp guides: &lt;a href=&quot;https://github.com/rabibotton/clog&quot; &gt;CLOG&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;While this is a guide for Ubuntu, it is similar on Mac and other UNIX flavours except your package manager may be different, e.g. homebrew on MacOS.&lt;/p&gt;

&lt;p&gt;The first step is to install SBCL, the high-performance Lisp compiler, which is very simple:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;sudo apt install sbcl&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Next we install Quicklisp, the Package Manager, placing the downloaded installation file in &lt;code&gt;/tmp/ql.lisp&lt;/code&gt; and then using SBCL to install:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;curl -o /tmp/ql.lisp http://beta.quicklisp.org/quicklisp.lisp&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Then we use SBCL to install Quicklisp. My instructions here differ from lisp-lang.org because I find it easier to install Quicklisp from within SBCL:&lt;/p&gt;

&lt;p&gt;First:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;sbcl --no-sysinit --no-userinit --load /tmp/ql.lisp&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Then press return. Then you will be inside SBCL, and will receive some instructions. Enter this command, which is in Common Lisp code, into SBCL to install Quicklisp into the ~/.quicklisp directory:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;(quicklisp-quick-start:install :path &amp;quot;~/.quicklisp&amp;quot;)&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Once done, there is one more command to run, to add necessary lines to your SBCL init file:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;(ql:add-to-init-file)&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;And then, to exit SBCL:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;(exit)&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;You should now be back at your bash prompt. The next step is to install Emacs with the following command:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;sudo apt install emacs&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;After installing, from your terminal run:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;emacs&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;And the GUI Emacs editor should pop up. (At this point, you can customise Emacs if you like, go to &lt;code&gt;Options &amp;gt; Customize Emacs&lt;/code&gt; and select your theme. I like tango-dark. Then at the top of that page, &lt;code&gt;Save Theme Settings&lt;/code&gt;, exit Emacs, and your theme should be saved.)&lt;/p&gt;

&lt;p&gt;Exit Emacs and return to your bash prompt. Now we need to install SLIME. SLIME turns Emacs into an IDE, with a live REPL into which you can plug code, and have the Lisp image return the evaluated results. This is very simple:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;sbcl --eval &amp;quot;(ql:quickload :quicklisp-slime-helper)&amp;quot; --quit&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Then, add this to &lt;code&gt;~/.emacs.d/init.el&lt;/code&gt; (you may instead find you have: &lt;code&gt;~/.emacs&lt;/code&gt; in which case the same applies.) This will create the file &amp;quot;slime-helper.el&amp;quot; in your ~/.quicklisp directory which will install the SLIME REPL and turn Emacs into an IDE.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;(load (expand-file-name &amp;quot;~/.quicklisp/slime-helper.el&amp;quot;))&lt;/code&gt;
&lt;code&gt;(setq inferior-lisp-program &amp;quot;sbcl&amp;quot;)&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Now run Emacs to test. In Emacs terminology, a capital M stands for the Meta key, which is usually the Alt key, and a capital C stands for Control, and is usually the CTRL key. So if we want you to type &lt;code&gt;Alt-X&lt;/code&gt; we will say &lt;code&gt;M-x&lt;/code&gt;. So now type into Emacs:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;M-x slime&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The SLIME REPL should open in the bottom pane of Emacs. At this point, you are set up and good to go, and can begin entering code into the REPL for evaluation, or download Quicklisp packages via &lt;code&gt;(ql:quickload :package)&lt;/code&gt;. More information at: &lt;a href=&quot;https://www.quicklisp.org/beta/&quot; &gt;Quicklisp Beta&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;However, we want the most up-to-date packages! So we will install Ultralisp, a distribution for Quicklisp Package Manager with more up-to-date packages.&lt;/p&gt;

&lt;p&gt;In the SLIME REPL type:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;(ql-dist:install-dist &amp;quot;http://dist.ultralisp.org/&amp;quot; :prompt nil)&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This may be all you need to do. However if you encounter issues installing packages (such as package installations hanging on an error) then this will resolve it. Remember slime-helper.el file we installed earlier? Go to &lt;code&gt;~/.quicklisp/&lt;/code&gt; and edit &lt;code&gt;slime-helper.el&lt;/code&gt;. Under the comments (noted by ;;;;) where it introduces the file, should be these two lines:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;(unless (boundp &#039;quicklisp-slime-helper-dist)&lt;/code&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;(setq quicklisp-slime-helper-dist &amp;quot;quicklisp&amp;quot;))&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;

&lt;p&gt;Edit the second line so that &amp;quot;quicklisp&amp;quot; now reads &amp;quot;ultralisp&amp;quot; like so:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;(setq quicklisp-slime-helper-dist &amp;quot;ultralisp&amp;quot;))&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;And save the file. (Type &lt;code&gt;C-x s&lt;/code&gt; if you&#039;re editing in Emacs.) Now restart Emacs and SLIME, and download your package.&lt;/p&gt;

&lt;p&gt;I hope you found this guide useful. If you have any issues setting up your Lisp IDE, the folks at the Lisp Discord, Lisp IRC, or r/Lisp will be happy to help. Check out the communities at &lt;a href=&quot;https://lisp-lang.org/community/&quot; &gt;Lisp-Lang Communities&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Thanks for reading, and happy hacking!&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;Excerpt separator can also be extracted from content.
Add &lt;code&gt;excerpt: &amp;lt;string&amp;gt;&lt;/code&gt; to the above metadata.
Excerpt separator is &lt;code&gt;&amp;lt;!--more--&amp;gt;&lt;/code&gt; by default.&lt;/p&gt;
</content> </entry><entry> <link type="text/html" rel="alternate" href="jacobis9000.github.io/posts/2024-08-05.html"/> <title>2024-08-05</title> <published>2024-08-05 14:53:44</published> <updated>2024-08-05 14:53:44</updated> <author> <name>Joseph Ashford</name> <uri>jacobis9000.github.io</uri> </author> <content type="html">&lt;!-- **** your post here (remove this line) **** --&gt;

&lt;!-- format: could be &#039;html&#039; (for raw html) or &#039;md&#039; (for markdown).  --&gt;

&lt;h1&gt;Learning Lisp: A New Programmer&#039;s Perspective&lt;/h1&gt;

&lt;blockquote&gt;
&lt;p&gt;&amp;quot;Each atom of that stone, each mineral flake of that night-filled mountain,
in itself, forms a world. The struggle itself toward the heights is enough
to fill a man&#039;s heart. One must imagine Sisyphus happy.&amp;quot; -- Albert Camus&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This quote of Albert Camus from his work on the absurdity of existence expresses something of my journey with Common Lisp.  Common Lisp is absurd.  It is an ancient language by the standards of programming, yet more modern than anything available in the lineage of C.  It is a simple language in some respects which can become infinitely more complex, because it is infinitely extensible and modifiable to your needs.  It has taken me two years of (on-and-off) learning Lisp to realise something about Lisp: it&#039;s not a language, it&#039;s a meta-language. It can become any language you like, and it can enable any paradigm, or combinations of paradigms you like. But what was it that Camus captured of my journey?&lt;/p&gt;

&lt;p&gt;My friends think I am ridiculous, in that I chose to learn to program with no purpose or aim in mind, no end-goal, no programming career I coveted nor anything, really, outside of the challenge itself.  This is what Camus means when he says we must imagine Sisyphus happy. Sisyphus, who must push the boulder to the top of the mount only to have it fall again, finds purpose in nothing more than his struggle. That&#039;s me!&lt;/p&gt;

&lt;p&gt;So I began with CS50x the programming course by Harvard, and learnt C and Python with varying degrees of success. I preferred C to Python. In fact, I struggled with Python so much, because it is determined to force you to think in a certain way, and I was unwilling to bend to its will.  And also: whitespace. And also: overloaded operators.  And also: well, I just didn&#039;t like everything about it. It seemed no improvement on C and much worse really, and I couldn&#039;t believe that it was touted as a &amp;quot;modern&amp;quot; and &amp;quot;accessible&amp;quot; language. Python wasn&#039;t for me, at that time, anyway.&lt;/p&gt;

&lt;p&gt;It&#039;s maybe because I grew up coding in MUSHcode. Not many people have heard of MUSHcode, but it&#039;s a programming language designed for text-based programming games called MUSHes, which stands for Multi-User Shared Hallucinations.  Our MUSH was graphical, though, with 16-bit IBM CP437 Extended Character Set graphics. Really, it pushed the envelope of what a MUSH is capable of doing, and I hold that it is the best MUSH ever made.  Now MUSHcode has been, by some, compared to Lisp, and in some ways the comparison holds. Like Lisp, data is usually a list (but the form the list takes is a string, because of course, it&#039;s a language for text-based games.) There&#039;s functions like &lt;strong&gt;dolist&lt;/strong&gt;. You nest functions, nest and nest and nest.  And there&#039;s brackets (parentheses.) Lots and lots of brackets. Round brackets and square brackets too.&lt;/p&gt;

&lt;p&gt;So brackets didn&#039;t intimidate me.&lt;/p&gt;

&lt;p&gt;It was on the basis that Lisp was similar to MUSHcode that I decided to try Lisp. Lisp was a revelation, coming from C and Python. It worked like I expected a programming language to work. It was natural, intuitive, sensible and sane. It was a dream coming from C and Python. Everything in Lisp has a return value, and code is data and data is code. So you plug functions into functions, and get results! Just like MUSHcode, but a real programming language (sorry MUSHcode.)&lt;/p&gt;

&lt;p&gt;So suddenly my Sisyphean struggle was not so much a struggle, but a joyful journey. Due to the vagaries of life I wasn&#039;t able to study Lisp constantly, work, family, etc. got in the way, and I have a lot of hobbies, too. But when I did I just had FUN! The REPL is an instant-feedback-loop, you test your code function by function, on the fly. There&#039;s no compiling, failing, trawling through pages of code. There&#039;s no confusion and misery for hours. I don&#039;t even know the full power of the debugger and usually just &amp;quot;Abort&amp;quot; but I find debugging in Lisp, compared to any other language I&#039;ve tried, a breeze.&lt;/p&gt;

&lt;p&gt;Lisp is just fun, but it is also consistent and makes sense. I can&#039;t explain why here. I&#039;m no expert, and there&#039;s better people for that, but if you haven&#039;t tried it, try Lisp: it might just change your life.&lt;/p&gt;

&lt;p&gt;So I&#039;ll upload to this blog bits of Lisp I find interesting, or stuff I&#039;m doing, or my thoughts about Lisp or programming generally. If you&#039;re interested in listening to the half-baked theories of a perpetual n00b, welcome to my blog :)&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;Excerpt separator can also be extracted from content.
Add &lt;code&gt;excerpt: &amp;lt;string&amp;gt;&lt;/code&gt; to the above metadata.
Excerpt separator is &lt;code&gt;&amp;lt;!--more--&amp;gt;&lt;/code&gt; by default.&lt;/p&gt;
</content> </entry> </feed>